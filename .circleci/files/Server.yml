Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    WebAppServersMinSize:
        Description: Minimum  Instances Number for Autoscaling Group
        Type: String
        Default: '1'
    WebAppServersMaxSize:
        Description: Maximum Instances Number for Autoscaling Group
        Type: String
        Default: '4'
Resources:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0  
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install python3 -y
          apt-get install python3-pip -y
          curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
          && chmod +x ./kubectl \
          mv ./kubectl /usr/local/bin/kubectl
          apt-get update -y &&  sudo apt-get install -y docker.io
          docker version 
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
          && chmod +x minikube \
          && mv minikube /usr/local/bin/
          apt install conntrack -y
          minikube start --driver=none
          minikube status
          kubectl create deployment hello-node --image=raghdam/capstoneproject
          kubectl expose deployment hello-node --type=NodePort --port=8080
          kubectl get pods
          kubectl get svc

          
      ImageId: ami-07b4f3c02c7f83d59
      KeyName: udacity
      SecurityGroups:
       - Ref: WebServerSecurityGroup
      InstanceType: t3.small
      BlockDeviceMappings:
       - DeviceName: "/dev/sdk"
         Ebs:
           VolumeSize: '20'
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PUB-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: !Ref WebAppServersMinSize
      MaxSize: !Ref WebAppServersMaxSize
      TargetGroupARNs:
      - Ref: WebAppTargetGroup        
  WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 20
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 10
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId: 
          Fn::ImportValue:
            Fn::Sub: "${EnvironmentName}-VPCID" 